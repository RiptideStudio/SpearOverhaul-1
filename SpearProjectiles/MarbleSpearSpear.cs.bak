using Microsoft.Xna.Framework;
using Terraria;
using Terraria.Audio;
using Terraria.ID;
using Terraria.ModLoader;

namespace SpearOverhaul.SpearProjectiles;

public class MarbleSpearSpear : ModProjectile
{
	private bool moveBack;

	public float movementFactor
	{
		get
		{
			return base.Projectile.ai[0] - 1.35f;
		}
		set
		{
			base.Projectile.ai[0] = value;
		}
	}

	public override void SetStaticDefaults()
	{
		base.DisplayName.SetDefault("Marble Spear");
		ProjectileID.Sets.TrailCacheLength[base.Projectile.type] = 5;
		ProjectileID.Sets.TrailingMode[base.Projectile.type] = 0;
	}

	public override void SetDefaults()
	{
		base.Projectile.width = 24;
		base.Projectile.height = 24;
		base.Projectile.aiStyle = 19;
		base.Projectile.penetrate = -1;
		base.Projectile.scale = 1.25f;
		base.Projectile.alpha = 0;
		base.Projectile.hide = true;
		base.Projectile.ownerHitCheck = true;
		base.Projectile.DamageType = DamageClass.Melee;
		base.Projectile.tileCollide = false;
		base.Projectile.friendly = true;
		base.Projectile.timeLeft = 60;
	}

	public override void ModifyHitNPC(NPC target, ref int damage, ref float knockback, ref bool crit, ref int hitDirection)
	{
		base.Projectile.hostile = false;
		base.Projectile.friendly = false;
		Player player = Main.player[base.Projectile.owner];
		Projectile.NewProjectile(target.GetSource_Death(), target.Center.X, target.Center.Y - 16f, 0f, 0f, base.Mod.Find<ModProjectile>("MarbleRay").Type, 0, knockback, player.whoAmI);
		Projectile.NewProjectile(target.GetSource_Death(), target.Center.X, target.Center.Y, base.Projectile.velocity.X, base.Projectile.velocity.Y, base.Mod.Find<ModProjectile>("Explosion").Type, damage, knockback, player.whoAmI);
		base.Projectile.hostile = false;
		base.Projectile.friendly = true;
	}

	public override void OnHitNPC(NPC target, int damage, float knockback, bool crit)
	{
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		base.Projectile.hostile = false;
		base.Projectile.friendly = false;
		_ = Main.player[base.Projectile.owner];
		SoundEngine.PlaySound(in SoundID.Item89, target.position);
		for (int i = 0; i < 12; i++)
		{
			Dust dust = Dust.NewDustDirect(base.Projectile.position, base.Projectile.height * 2, base.Projectile.width * 2, 16, base.Projectile.velocity.X * 0.2f, base.Projectile.velocity.Y * 0.2f, 200, default(Color), 1.2f);
			dust.velocity = base.Projectile.velocity * 2f;
			dust.velocity *= 0.2f;
		}
		base.Projectile.hostile = false;
		base.Projectile.friendly = true;
	}

	public override void AI()
	{
		if (Main.rand.NextBool(2))
		{
			Dust dust = Dust.NewDustDirect(base.Projectile.position, base.Projectile.height, base.Projectile.width, 204, base.Projectile.velocity.X * 0.2f, base.Projectile.velocity.Y * 0.2f, 200, default(Color), 1.2f);
			dust.velocity += base.Projectile.velocity * 0.3f;
			dust.velocity *= 0.2f;
		}
		if (Main.rand.NextBool(2))
		{
			Dust dust2 = Dust.NewDustDirect(base.Projectile.position, base.Projectile.height, base.Projectile.width, 63, base.Projectile.velocity.X * 0.2f, base.Projectile.velocity.Y * 0.2f, 200, default(Color), 1.2f);
			dust2.velocity += base.Projectile.velocity * 0.3f;
			dust2.velocity *= 0.2f;
			dust2.noGravity = true;
		}
		Player projOwner = Main.player[base.Projectile.owner];
		Vector2 ownerMountedCenter = projOwner.RotatedRelativePoint(projOwner.MountedCenter, reverseRotation: true);
		base.Projectile.direction = projOwner.direction;
		projOwner.heldProj = base.Projectile.whoAmI;
		projOwner.itemTime = projOwner.itemAnimation;
		base.Projectile.position.X = ownerMountedCenter.X - ((float)(base.Projectile.width / 2) - base.Projectile.velocity.X * 2f);
		base.Projectile.position.Y = ownerMountedCenter.Y - ((float)(base.Projectile.height / 2) - base.Projectile.velocity.Y * 2f);
		if (!projOwner.frozen)
		{
			if (this.movementFactor == 0f)
			{
				this.movementFactor = 1f;
				base.Projectile.netUpdate = true;
			}
			if (projOwner.itemAnimation < projOwner.itemAnimationMax / 3)
			{
				this.movementFactor -= 0.22f;
				if (!this.moveBack)
				{
					this.moveBack = true;
				}
			}
			else
			{
				this.movementFactor += 2.85f;
			}
		}
		base.Projectile.position += base.Projectile.velocity * this.movementFactor;
		if (projOwner.itemAnimation == 0)
		{
			base.Projectile.Kill();
		}
		base.Projectile.rotation = base.Projectile.velocity.ToRotation() + MathHelper.ToRadians(135f);
		if (base.Projectile.spriteDirection == -1)
		{
			base.Projectile.rotation -= MathHelper.ToRadians(90f);
		}
	}
}
