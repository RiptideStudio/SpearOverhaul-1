using System;
using Microsoft.Xna.Framework;
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;

namespace SpearOverhaul.SpearProjectiles;

public class ElementalSpearSpear : ModProjectile
{
	private bool jab;

	private int timer;

	private bool moveBack;

	public float movementFactor
	{
		get
		{
			return base.Projectile.ai[0] - 0.1f;
		}
		set
		{
			base.Projectile.ai[0] = value;
		}
	}

	public override void SetStaticDefaults()
	{
		// base.DisplayName.SetDefault("Elemental Spear");
		ProjectileID.Sets.TrailCacheLength[base.Projectile.type] = 5;
		ProjectileID.Sets.TrailingMode[base.Projectile.type] = 0;
	}

	public override void SetDefaults()
	{
		base.Projectile.width = 69;
		base.Projectile.height = 69;
		base.Projectile.aiStyle = 19;
		base.Projectile.penetrate = -1;
		base.Projectile.scale = 1.25f;
		base.Projectile.alpha = 0;
		base.Projectile.hide = true;
		base.Projectile.ownerHitCheck = true;
		base.Projectile.DamageType = DamageClass.Melee;
		base.Projectile.tileCollide = false;
		base.Projectile.friendly = true;
		base.Projectile.timeLeft = 60;
		base.Projectile.extraUpdates = 2;
	}

	public override void OnHitNPC(NPC target, int damage, float knockback, bool crit)
	{
		_ = Main.player[base.Projectile.owner];
		if (Main.rand.Next(0, 2) == 1)
		{
			target.AddBuff(24, 120);
			target.AddBuff(44, 120);
		}
	}

	public override void AI()
	{
		base.Projectile.position.X += (int)Math.Sin((double)(base.Projectile.timeLeft / 3)) * 5;
		base.Projectile.position.Y += (int)Math.Cos((double)(base.Projectile.timeLeft / 3)) * 5;
		if (this.jab)
		{
			this.timer++;
		}
		Dust dust = Dust.NewDustDirect(base.Projectile.position, base.Projectile.height, base.Projectile.width, 135, base.Projectile.velocity.X * 0.2f, base.Projectile.velocity.Y * 0.2f, 200, default(Color), 1.75f);
		dust.velocity += base.Projectile.velocity;
		dust.noGravity = true;
		Dust dust2 = Dust.NewDustDirect(base.Projectile.position, base.Projectile.height, base.Projectile.width, 270, base.Projectile.velocity.X * 0.2f, base.Projectile.velocity.Y * 0.2f, 200, default(Color), 1.5f);
		dust2.velocity += base.Projectile.velocity;
		dust2.noGravity = true;
		Player projOwner = Main.player[base.Projectile.owner];
		Vector2 ownerMountedCenter = projOwner.RotatedRelativePoint(projOwner.MountedCenter, reverseRotation: true);
		base.Projectile.direction = projOwner.direction;
		projOwner.heldProj = base.Projectile.whoAmI;
		projOwner.itemTime = projOwner.itemAnimation;
		base.Projectile.position.X = ownerMountedCenter.X - ((float)(base.Projectile.width / 2) + base.Projectile.velocity.X * 3f);
		base.Projectile.position.Y = ownerMountedCenter.Y - ((float)(base.Projectile.height / 2) + base.Projectile.velocity.Y * 3f);
		if (!projOwner.frozen)
		{
			if (this.movementFactor == 0f)
			{
				this.movementFactor = 1f;
				base.Projectile.netUpdate = true;
			}
			if (projOwner.itemAnimation < projOwner.itemAnimationMax / 3)
			{
				this.movementFactor -= 2.25f;
			}
			else
			{
				this.movementFactor += 1.75f;
			}
		}
		base.Projectile.position += base.Projectile.velocity * this.movementFactor;
		if (projOwner.itemAnimation == 0)
		{
			base.Projectile.Kill();
		}
		base.Projectile.rotation = base.Projectile.velocity.ToRotation() + MathHelper.ToRadians(135f);
		if (base.Projectile.spriteDirection == -1)
		{
			base.Projectile.rotation -= MathHelper.ToRadians(90f);
		}
	}
}
